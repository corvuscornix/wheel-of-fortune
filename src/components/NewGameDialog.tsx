import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { getRandomPuzzle } from '../state/puzzles';
import {
  Overlay,
  Dialog,
  Button,
  FlexColumn,
  FlexRow,
  SmallButton,
  Text,
  Header2
} from './layout';
import { useAppState } from '../state/stateContext';
import { Players } from '.';
import { Puzzle } from '../state/state';

export const NewGameDialog: React.FunctionComponent = observer(() => {
  const appState = useAppState();
  const {
    isEditingGame,
    clearTicking,
    startNewGame,
    puzzles: defaultPuzzles
  } = appState;

  const [formData, setFormState] = useState<{
    sentence: string;
    subject: string;
    autoGeneratedRoundsCount: number;
    puzzles: Puzzle[];
    error: string;
  }>({
    sentence: '',
    subject: '',
    autoGeneratedRoundsCount: 0,
    puzzles: defaultPuzzles,
    error: ''
  });

  const {
    sentence,
    subject,
    autoGeneratedRoundsCount,
    puzzles,
    error
  } = formData;

  if (!isEditingGame) return null;

  clearTicking();

  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {
    const { value, name } = event.currentTarget;
    setFormState({ ...formData, [name]: value });
  };

  const handleAdd = () => {
    if (sentence.length > 0) {
      puzzles.push({
        sentence,
        subject
      });

      setFormState({
        ...formData,
        sentence: '',
        subject: ''
      });
    }
  };

  const handleClearPuzzles = () => {
    setFormState({
      ...formData,
      sentence: '',
      subject: '',
      puzzles: []
    });
  };

  const handleSubmit = () => {
    let newPuzzles = [...puzzles];

    if (autoGeneratedRoundsCount > 0) {
      const autoGeneratedRounds: Puzzle[] = [];
      while (autoGeneratedRounds.length < autoGeneratedRoundsCount) {
        const randomPuzzle = getRandomPuzzle();

        // Try again if this sentence already exists on the list
        if (
          [...puzzles, ...autoGeneratedRounds].findIndex(
            puzzle => puzzle.sentence === randomPuzzle.sentence
          ) > -1
        ) {
          continue;
        }

        autoGeneratedRounds.push(randomPuzzle);
      }

      newPuzzles = newPuzzles.concat(autoGeneratedRounds);
    }

    if (newPuzzles.length === 0) {
      setFormState({
        ...formData,
        error: 'Add some puzzles first!'
      });
      return;
    } else if (appState.players.length === 0) {
      setFormState({
        ...formData,
        error: 'Add players first!'
      });
      return;
    }

    setFormState({
      ...formData,
      puzzles: newPuzzles,
      error: ''
    });

    appState.puzzles = newPuzzles;
    appState.isEditingGame = false;
    startNewGame();
  };

  return (
    <Overlay>
      <Dialog style={{ maxWidth: 400 }}>
        <FlexColumn>
          <Header2>New game</Header2>
          {puzzles.map((puzzle, index) => (
            <p key={index}>{`${index + 1}. ${puzzle.sentence} (${
              puzzle.subject
            })`}</p>
          ))}
          <label htmlFor="sentence">Sentence</label>
          <input
            autoFocus
            autoComplete="off"
            name="sentence"
            onChange={handleChange}
            value={sentence}
            type="text"
          ></input>
          <label htmlFor="subject">Subject</label>
          <input
            name="subject"
            autoComplete="off"
            onChange={handleChange}
            value={subject}
            type="text"
          ></input>
          <FlexRow>
            <SmallButton onClick={handleAdd}>Add</SmallButton>
            {puzzles.length > 0 && (
              <SmallButton negative onClick={handleClearPuzzles}>
                Clear all
              </SmallButton>
            )}
          </FlexRow>
          <FlexColumn style={{ paddingTop: 8 }}>
            <label htmlFor="subject">Autogenerated rounds</label>
            <input
              name="autoGeneratedRoundsCount"
              autoComplete="off"
              onChange={handleChange}
              value={autoGeneratedRoundsCount}
              type="number"
            ></input>
          </FlexColumn>

          <Players editable />
          <FlexRow style={{ paddingTop: 16 }}>
            <Button positive onClick={handleSubmit}>
              Start game
            </Button>
            <Button onClick={() => (appState.isEditingGame = false)}>
              Cancel
            </Button>
          </FlexRow>
          {error.length > 0 && (
            <FlexRow>
              <Text error>{error}</Text>
            </FlexRow>
          )}
        </FlexColumn>
      </Dialog>
    </Overlay>
  );
});
